<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GenericRepositoryEF.Core</name>
    </assembly>
    <members>
        <member name="T:GenericRepositoryEF.Core.Exceptions.ConcurrencyException">
            <summary>
            Exception thrown when a concurrency conflict occurs.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Exceptions.ConcurrencyException.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.ConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.ConcurrencyException"/> class.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.ConcurrencyException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException">
            <summary>
            Exception thrown when an entity is not found.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.EntityNotFoundException"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="T:GenericRepositoryEF.Core.Exceptions.RepositoryException">
            <summary>
            Exception thrown when a repository operation fails.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Exceptions.RepositoryException.EntityType">
            <summary>
            Gets or sets the entity type.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Exceptions.RepositoryException.MethodName">
            <summary>
            Gets or sets the method name.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.RepositoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.RepositoryException"/> class.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.RepositoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.RepositoryException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.RepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.RepositoryException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.RepositoryException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.RepositoryException"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="methodName">The method name.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:GenericRepositoryEF.Core.Exceptions.TransactionException">
            <summary>
            Exception thrown when a transaction fails.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.TransactionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.TransactionException"/> class.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.TransactionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.TransactionException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Exceptions.TransactionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Exceptions.TransactionException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:GenericRepositoryEF.Core.Extensions.QueryableExtensions">
            <summary>
            Extension methods for IQueryable.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Extensions.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
            Tracks the query results or returns them as no-tracking.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <param name="query">The query.</param>
            <param name="track">Whether to track the entities.</param>
            <returns>The query with tracking set.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Extensions.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Includes a related entity in the query.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <param name="query">The query.</param>
            <param name="path">The include path.</param>
            <returns>The query with the include.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Extensions.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Includes a related entity in the query.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="query">The query.</param>
            <param name="path">The include path.</param>
            <returns>The query with the include.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1">
            <summary>
            Interface for a cached repository that adds caching support to a standard repository.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RefreshCache(System.Object)">
            <summary>
            Refreshes the cache for an entity by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RefreshCacheAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache for an entity by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RefreshCache(GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Refreshes the cache for a collection of entities.
            </summary>
            <param name="specification">The specification to refresh.</param>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RefreshCacheAsync(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache for a collection of entities.
            </summary>
            <param name="specification">The specification to refresh.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RefreshEntireCache">
            <summary>
            Refreshes the entire cache for the entity type.
            </summary>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RefreshEntireCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Refreshes the entire cache for the entity type.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RemoveFromCache(System.Object)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>True if the item was removed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.RemoveFromCacheAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="id">The ID of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the item was removed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.ClearCache">
            <summary>
            Clears the entire cache for the entity type.
            </summary>
            <returns>True if the cache was cleared, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`1.ClearCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Clears the entire cache for the entity type.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the cache was cleared, otherwise false.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ICachedRepository`2">
            <summary>
            Interface for a cached repository that adds caching support to a standard repository with a key.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`2.RefreshCache(`1)">
            <summary>
            Refreshes the cache for an entity by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`2.RefreshCacheAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Refreshes the cache for an entity by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the cache was refreshed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`2.RemoveFromCache(`1)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>True if the item was removed, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ICachedRepository`2.RemoveFromCacheAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="id">The ID of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if the item was removed, otherwise false.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ICurrentUserService">
            <summary>
            Interface for obtaining information about the current user.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ICurrentUserService.UserId">
            <summary>
            Gets the current user identifier.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ICurrentUserService.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user is authenticated.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ICurrentUserService.UserName">
            <summary>
            Gets the current user name.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ICurrentUserService.Roles">
            <summary>
            Gets the user roles.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IDateTime">
            <summary>
            Interface for obtaining the current date and time.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IDateTime.Now">
            <summary>
            Gets the current date time.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IDateTime.UtcNow">
            <summary>
            Gets the current UTC date time.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IDateTime.Today">
            <summary>
            Gets the current date.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IEntity">
            <summary>
            Interface for an entity with an ID.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IEntity.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IEntity`1">
            <summary>
            Interface for a strongly typed entity with an ID.
            </summary>
            <typeparam name="TId">The type of the ID.</typeparam>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IEntity`1.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IAuditableEntity">
            <summary>
            Interface for an auditable entity.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IAuditableEntity.CreatedAt">
            <summary>
            Gets or sets the date the entity was created.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IAuditableEntity.CreatedBy">
            <summary>
            Gets or sets the user that created the entity.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IAuditableEntity.ModifiedAt">
            <summary>
            Gets or sets the date the entity was last modified.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IAuditableEntity.ModifiedBy">
            <summary>
            Gets or sets the user that last modified the entity.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ISoftDelete">
            <summary>
            Interface for a soft delete entity.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISoftDelete.IsDeleted">
            <summary>
            Gets or sets a value indicating whether the entity is deleted.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISoftDelete.DeletedAt">
            <summary>
            Gets or sets the date the entity was deleted.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ISoftDeleteWithUser">
            <summary>
            Interface for a soft delete entity with user information.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISoftDeleteWithUser.DeletedBy">
            <summary>
            Gets or sets the user that deleted the entity.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IConcurrencyCheck">
            <summary>
            Interface for a concurrency checked entity.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IConcurrencyCheck.ConcurrencyStamp">
            <summary>
            Gets or sets the concurrency stamp.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IEntityWithKey`1">
            <summary>
            Interface for an entity with a key of a specific type.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.IEntityWithKey`1.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1">
            <summary>
            Interface for a read-only repository.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.Find(System.Object)">
            <summary>
            Finds an entity by ID.
            </summary>
            <param name="id">The ID of the entity to find.</param>
            <returns>The found entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Finds an entity by ID.
            </summary>
            <param name="id">The ID of the entity to find.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The found entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetAll">
            <summary>
            Gets all entities.
            </summary>
            <returns>All entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetAll(GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Gets all entities with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>The found entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all entities.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>All entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetAllAsync(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets all entities with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The found entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetSingleOrDefault(GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Gets a single entity with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>The found entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetSingleOrDefaultAsync(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets a single entity with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The found entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetFirstOrDefault(GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Gets the first entity with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>The found entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetFirstOrDefaultAsync(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets the first entity with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The found entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.Count">
            <summary>
            Counts the number of entities.
            </summary>
            <returns>The number of entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.Count(GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Counts the number of entities with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <returns>The number of entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Counts the number of entities.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.CountAsync(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Counts the number of entities with a specification.
            </summary>
            <param name="specification">The specification.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.Any(GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Checks if an entity with the specification exists.
            </summary>
            <param name="specification">The specification.</param>
            <returns>True if an entity exists, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.AnyAsync(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Checks if an entity with the specification exists.
            </summary>
            <param name="specification">The specification.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>True if an entity exists, otherwise false.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetPaged(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Int32,System.Int32)">
            <summary>
            Gets a paged result.
            </summary>
            <param name="specification">The specification.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The page size.</param>
            <returns>The paged result.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IReadOnlyRepository`1.GetPagedAsync(GenericRepositoryEF.Core.Interfaces.ISpecification{`0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paged result.
            </summary>
            <param name="specification">The specification.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The paged result.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IRepository`1">
            <summary>
            Interface for a repository.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.Add(`0)">
            <summary>
            Adds a new entity.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns>The added entity.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of entities.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a new entity.
            </summary>
            <param name="entity">The entity to add.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The added entity.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Adds a collection of entities.
            </summary>
            <param name="entities">The entities to add.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.Update(`0)">
            <summary>
            Updates an entity.
            </summary>
            <param name="entity">The entity to update.</param>
            <returns>The updated entity.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates a collection of entities.
            </summary>
            <param name="entities">The entities to update.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.Delete(`0)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">The entity to delete.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.Delete(System.Object)">
            <summary>
            Deletes an entity by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.DeleteRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deletes a collection of entities.
            </summary>
            <param name="entities">The entities to delete.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.Delete(GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Deletes entities based on a specification.
            </summary>
            <param name="specification">The specification to match entities to delete.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.SaveChanges">
            <summary>
            Saves changes to the repository.
            </summary>
            <returns>The number of entities saved.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves changes to the repository.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of entities saved.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IRepositoryFactory">
            <summary>
            Factory for creating repositories.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepositoryFactory.GetRepository``1">
            <summary>
            Gets a repository for the specified entity type.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>The repository.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepositoryFactory.GetRepository``2">
            <summary>
            Gets a repository for the specified entity type with a key.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <returns>The repository.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepositoryFactory.GetReadOnlyRepository``1">
            <summary>
            Gets a read-only repository for the specified entity type.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>The read-only repository.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepositoryFactory.GetCachedRepository``1">
            <summary>
            Gets a cached repository for the specified entity type.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>The cached repository.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepositoryFactory.GetCachedRepository``2">
            <summary>
            Gets a cached repository for the specified entity type with a key.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <returns>The cached repository.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IRepository`2">
            <summary>
            Interface for a repository with a typed key.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`2.GetById(`1)">
            <summary>
            Gets an entity by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>The entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`2.GetByIdAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Gets an entity by ID asynchronously.
            </summary>
            <param name="id">The ID of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The entity or null.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`2.GetByIdOrThrow(`1)">
            <summary>
            Gets an entity by ID or throws if not found.
            </summary>
            <param name="id">The ID of the entity.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`2.GetByIdOrThrowAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Gets an entity by ID asynchronously or throws if not found.
            </summary>
            <param name="id">The ID of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`2.Delete(`1)">
            <summary>
            Deletes an entity by ID.
            </summary>
            <param name="id">The ID of the entity.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IRepository`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Deletes an entity by ID asynchronously.
            </summary>
            <param name="id">The ID of the entity.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ISpecificationEvaluator">
            <summary>
            Non-generic specification evaluator interface.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ISpecificationEvaluator.For``1">
            <summary>
            Gets a typed specification evaluator.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>The specification evaluator.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ISpecificationEvaluator`1">
            <summary>
            Specification evaluator interface.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ISpecificationEvaluator`1.GetQuery(System.Linq.IQueryable{`0},GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Gets a query with a specification applied.
            </summary>
            <param name="inputQuery">The input query.</param>
            <param name="specification">The specification.</param>
            <returns>The query with the specification applied.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ISpecification`1">
            <summary>
            Interface for a specification that can be applied to a query.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.Criteria">
            <summary>
            Gets the criteria.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.Includes">
            <summary>
            Gets the include expressions.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.IncludeStrings">
            <summary>
            Gets the include strings.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.OrderBy">
            <summary>
            Gets the order by expression.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.OrderByDescending">
            <summary>
            Gets the order by descending expression.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.GroupBy">
            <summary>
            Gets the group by expression.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.IsTrackingEnabled">
            <summary>
            Gets a value indicating whether the entity should be tracked.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.IsPagingEnabled">
            <summary>
            Gets a value indicating whether the query is paging enabled.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.Skip">
            <summary>
            Gets the number of items to skip.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Interfaces.ISpecification`1.Take">
            <summary>
            Gets the number of items to take.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.ITransaction">
            <summary>
            Interface for a transaction.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ITransaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits the transaction.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.ITransaction.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            Rolls back the transaction.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IUnitOfWork">
            <summary>
            Interface for the unit of work pattern.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.Repository``1">
            <summary>
            Gets a repository for the specified entity type.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>A repository for the entity type.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.ReadOnlyRepository``1">
            <summary>
            Gets a read-only repository for the specified entity type.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>A read-only repository for the entity type.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.CachedRepository``1">
            <summary>
            Gets a cached repository for the specified entity type.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>A cached repository for the entity type.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
            <returns>A transaction.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>A transaction.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Begins a transaction asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A transaction.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Begins a transaction with the specified isolation level asynchronously.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A transaction.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.RollbackTransaction">
            <summary>
            Rolls back the transaction.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.CommitTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Commits the transaction asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.RollbackTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Rolls back the transaction asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.SaveChanges">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <returns>The number of affected entities.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWork.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all changes made in this context to the database asynchronously.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The number of affected entities.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Interfaces.IUnitOfWorkFactory">
            <summary>
            Factory for creating units of work.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Interfaces.IUnitOfWorkFactory.CreateUnitOfWork">
            <summary>
            Creates a unit of work.
            </summary>
            <returns>The unit of work.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Models.OrderByDirection">
            <summary>
            Represents the direction of ordering.
            </summary>
        </member>
        <member name="F:GenericRepositoryEF.Core.Models.OrderByDirection.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:GenericRepositoryEF.Core.Models.OrderByDirection.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:GenericRepositoryEF.Core.Models.PagedResult`1">
            <summary>
            Represents a paged result.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="P:GenericRepositoryEF.Core.Models.PagedResult`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Models.PagedResult`1.TotalCount">
            <summary>
            Gets or sets the total count.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Models.PagedResult`1.Page">
            <summary>
            Gets or sets the current page.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Models.PagedResult`1.PageSize">
            <summary>
            Gets or sets the page size.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Models.PagedResult`1.TotalPages">
            <summary>
            Gets the total pages.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Models.PagedResult`1.HasPreviousPage">
            <summary>
            Gets a value indicating whether this page has a previous page.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Models.PagedResult`1.HasNextPage">
            <summary>
            Gets a value indicating whether this page has a next page.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Models.PagedResult`1.Create(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:GenericRepositoryEF.Core.Models.PagedResult`1"/>.
            </summary>
            <param name="items">The items.</param>
            <param name="totalCount">The total count.</param>
            <param name="page">The current page.</param>
            <param name="pageSize">The page size.</param>
            <returns>A paged result.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Models.PagedResult`1.Empty(System.Int32,System.Int32)">
            <summary>
            Creates an empty paged result.
            </summary>
            <param name="page">The current page.</param>
            <param name="pageSize">The page size.</param>
            <returns>An empty paged result.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Specifications.BaseSpecification`1">
            <summary>
            Base class for specifications.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Specifications.BaseSpecification`1"/> class.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Specifications.BaseSpecification`1"/> class.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.Criteria">
            <summary>
            Gets the criteria.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.Includes">
            <summary>
            Gets the includes.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.IncludeStrings">
            <summary>
            Gets the include strings.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.OrderBy">
            <summary>
            Gets the order by.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.OrderByDescending">
            <summary>
            Gets the order by descending.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.GroupBy">
            <summary>
            Gets the group by.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.IsTrackingEnabled">
            <summary>
            Gets a value indicating whether to track the entity.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.IsPagingEnabled">
            <summary>
            Gets a value indicating whether to enable pagination.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.Skip">
            <summary>
            Gets the skip.
            </summary>
        </member>
        <member name="P:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.Take">
            <summary>
            Gets the take.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.AddInclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies an include expression.
            </summary>
            <param name="includeExpression">The include expression.</param>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.AddInclude(System.String)">
            <summary>
            Applies an include string.
            </summary>
            <param name="includeString">The include string.</param>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.ApplyPaging(System.Int32,System.Int32)">
            <summary>
            Applies pagination.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.ApplyPagingWithPageNumber(System.Int32,System.Int32)">
            <summary>
            Applies pagination with a page number and size.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The page size.</param>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.ApplyOrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies an "order by" expression.
            </summary>
            <param name="orderByExpression">The order by expression.</param>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.ApplyOrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies an "order by descending" expression.
            </summary>
            <param name="orderByDescendingExpression">The order by descending expression.</param>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.ApplyGroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies a "group by" expression.
            </summary>
            <param name="groupByExpression">The group by expression.</param>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.DisableTracking">
            <summary>
            Disables tracking of entities.
            </summary>
            <returns>The specification.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.BaseSpecification`1.EnableTracking">
            <summary>
            Enables tracking of entities.
            </summary>
            <returns>The specification.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1">
            <summary>
            Specification builder for fluent API.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1"/> class.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an include expression.
            </summary>
            <param name="includeExpression">The include expression.</param>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.Include(System.String)">
            <summary>
            Adds an include string.
            </summary>
            <param name="includeString">The include string.</param>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.Paginate(System.Int32,System.Int32)">
            <summary>
            Applies pagination.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.Page(System.Int32,System.Int32)">
            <summary>
            Applies pagination with a page number and size.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">The page size.</param>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies an "order by" expression.
            </summary>
            <param name="orderByExpression">The order by expression.</param>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies an "order by descending" expression.
            </summary>
            <param name="orderByDescendingExpression">The order by descending expression.</param>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies a "group by" expression.
            </summary>
            <param name="groupByExpression">The group by expression.</param>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.AsNoTracking">
            <summary>
            Disables tracking of entities.
            </summary>
            <returns>The specification builder.</returns>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationBuilder`1.WithTracking">
            <summary>
            Enables tracking of entities.
            </summary>
            <returns>The specification builder.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Specifications.SpecificationEvaluator">
            <summary>
            Non-generic specification evaluator.
            </summary>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationEvaluator.For``1">
            <summary>
            Gets a typed specification evaluator.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <returns>The specification evaluator.</returns>
        </member>
        <member name="T:GenericRepositoryEF.Core.Specifications.SpecificationEvaluator`1">
            <summary>
            Specification evaluator for applying specifications to queries.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
        </member>
        <member name="M:GenericRepositoryEF.Core.Specifications.SpecificationEvaluator`1.GetQuery(System.Linq.IQueryable{`0},GenericRepositoryEF.Core.Interfaces.ISpecification{`0})">
            <summary>
            Gets a query with a specification applied.
            </summary>
            <param name="inputQuery">The input query.</param>
            <param name="specification">The specification.</param>
            <returns>The query with the specification applied.</returns>
        </member>
    </members>
</doc>
